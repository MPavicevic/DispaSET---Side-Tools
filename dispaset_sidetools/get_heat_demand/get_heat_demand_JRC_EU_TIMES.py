# -*- coding: utf-8 -*-
"""
Created on Sun Apr  7 18:53:45 2019

@author: Matija Pavičević
@author: Andrea
"""

import pickle
import pandas as pd
import sys,os
sys.path.append(os.path.abspath(r'../..')) 
from dispaset_sidetools.common import make_dir

# %% Adjustable inputs that should be modified
# Scenario definition
""" output file: SOURCE + SCENARIO + '_' + str(YEAR) + '_' + CASE """
WRITE_CSV_FILES = True  # Write csv database
SCENARIO = 'NearZeroCarbon'  # Scenario name, used for naming csv files
CASE = 'ALLFLEX'  # Case name, used for naming csv files
SOURCE = 'JRC_EU_TIMES_'  # Source name, used for naming csv files
YEAR = 2016

# %% Inputs
# Folder destinations
input_folder = '../../Inputs/'  # Standard input folder
source_folder = 'JRC_EU_TIMES/'
output_folder = '../../Outputs/'  # Standard output folder
scenario = SCENARIO + '/'

# %% Load data
# Input files
pickle_off = open(input_folder + source_folder+ scenario + SOURCE + SCENARIO + '_' + str(2050) + '_' + CASE + '.p', 'rb')
inputfile_p2h = 'TIMES_P2H_Demand_tech_2050.xlsx'
inputfile_dh = 'TIMES_DH_Demand_2050.xlsx'
#inputfile_chp = 'TIMES_CHP_Capacities_2050.csv'
heating_folder = 'Default/Heating_Demands/When2Heat/'

# Load pickle data for power plants generated by get_Capacities script
allunits = pickle.load(pickle_off)

# %% Read CHP units and max capacities
chp_units = {}
share_chp = {}
for c in allunits:
    tmp = allunits[c].loc[allunits[c]['Unit'].str.contains('CHP')]
    if tmp.empty is True:
        print('empty')
    else:
        tmp['CHP_Total_Heat_Cap'] = tmp['Nunits'] * tmp['PowerCapacity'] / tmp['CHPPowerToHeat']
        chp_units[c] = tmp
        share_chp[c] = pd.DataFrame(
            chp_units[c]['CHP_Total_Heat_Cap'] / chp_units[c]['CHP_Total_Heat_Cap'].sum(axis=0)).T

times_p2h_demand = pd.read_excel(input_folder + source_folder + scenario + inputfile_p2h, index_col=0, header=0, skiprows=1)
times_p2h_demand.fillna(0, inplace=True)
times_p2h_demand = times_p2h_demand / 3.6  # TWh

times_dh_demand = pd.read_excel(input_folder + source_folder + scenario + inputfile_dh, index_col=0, header=0, skiprows=0)
times_dh_demand.fillna(0, inplace=True)
times_dh_demand = times_dh_demand / 3.6  # TWh

# %% Define countries that have the weather year closer to the 2016
c = {}
c['2008'] = ['BE', 'CZ', 'DE', 'IE', 'FR', 'HR', 'LU', 'NL', 'UK']
c['2009'] = ['EE', 'LV', 'LT', 'HU', 'PL', 'RO', 'SI', 'SK', 'FI']
c['2010'] = []
c['2011'] = ['DK', 'IT', 'AT', 'CH']
c['2012'] = []
c['2013'] = ['BG', 'EL', 'ES', 'PT', 'SE', 'NO']

years = ['2008', '2009', '2010', '2011', '2012', '2013']

# Import heating demand profile
demand_heat = {}
demand_heat_tot = {}
demand_heat_ad = {}

# Create df with heat profiles
for y in years:
    demand_heat[y] = pd.read_csv(input_folder + heating_folder + 'When2Heat_' + y + '.csv', header=0, index_col=0)
    demand_heat[y]['UK'] = demand_heat[y]['GB']
    demand_heat[y].drop(columns=['GB'], inplace=True)

# Add correction for the not leap years
for temp in ['2009', '2010', '2011', '2013']:
    for h in ['00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16',
              '17', '18', '19', '20', '21', '22', '23']:
        demand_heat[temp].loc[temp + '-02-29 ' + h + ':00:00', :] = (demand_heat[temp].loc[temp + '-02-28 ' + h +
                                                                    ':00:00', :] + demand_heat[temp].loc[temp +
                                                                    '-03-01 ' + h + ':00:00', :]) / 2
        demand_heat[temp].sort_index(inplace=True)

# %% Make the profiles non-dimensional [MW/MWh] and change all the index to 2016
# TODO:
# Generalize years
for y in years:
    demand_heat[y] = demand_heat[y].loc[:, c[y]]  # Select for each country the closest hourly profile
    demand_heat_ad[y] = demand_heat[y] / demand_heat[y].sum(axis=0)
    yr = YEAR
    hour = pd.date_range(start=str(yr) + '-01-01', end=str(yr) + '-12-31 23:00', freq='H')
    demand_heat_ad[y].set_index(hour, inplace=True)

demand_heat_ad_2016 = pd.concat(
    [demand_heat_ad['2008'], demand_heat_ad['2009'], demand_heat_ad['2010'], demand_heat_ad['2011'],
     demand_heat_ad['2012'], demand_heat_ad['2013']], axis=1, join='inner')

curve_p2h = {}
curve_chp = {}

for c in demand_heat_ad_2016.columns:
    curve_p2h[c] = pd.DataFrame(1, index=demand_heat_ad_2016[c].index, columns=times_p2h_demand.loc[c, :].index)
    for tech in times_p2h_demand.columns:
        curve_p2h[c][tech] = demand_heat_ad_2016[c] * times_p2h_demand.loc[c, tech] * 1e6
    curve_p2h[c]['Total'] = curve_p2h[c]['Null'] + curve_p2h[c]['Heat pump - air'] + \
                            curve_p2h[c]['Heat pump - ground']
    curve_p2h[c] = pd.DataFrame(curve_p2h[c]['Total'])
    curve_p2h[c].rename(columns={"Total": c + '_P2HT_OTH'}, inplace=True)

for c in demand_heat_ad_2016.columns:
    curve_chp[c] = pd.DataFrame(1, index=demand_heat_ad_2016[c].index, columns=chp_units[c].index)
    for tech in curve_chp[c].columns:
        curve_chp[c][tech] = demand_heat_ad_2016[c] * times_dh_demand.loc[c, 'District heating'] * 1e6 \
                             * share_chp[c].loc['CHP_Total_Heat_Cap', tech]
    print(chp_units[c]['CHP_Total_Heat_Cap'] / curve_chp[c].max())

heat_demand = {}
for c in curve_p2h:
    heat_demand[c] = pd.concat([curve_p2h[c], curve_chp[c]], axis=1, sort=False)

# %% Write csv file:
'''    
inputs (heat demand file name as a string)
:filename:        clustered for example
:units:           allunits for example
'''


def write_csv_files(dem_filename, heat_demand):
    filename = dem_filename + '.csv'
    allunits = heat_demand
    if WRITE_CSV_FILES is True:
        for c in allunits:
            make_dir((output_folder))
            make_dir(output_folder + source_folder + 'Database')
            folder = output_folder + source_folder + 'Database/' + scenario + 'Heat_demand/'
            make_dir(folder)
            make_dir(folder + c)
            allunits[c].to_csv(folder + c + '/' + filename)
    else:
        print('[WARNING ]: ' + 'WRITE_CSV_FILES = False, unable to write .csv files')


write_csv_files(SOURCE + SCENARIO + '_' + CASE, heat_demand)
# write_csv_files(SOURCE + SCENARIO + '_' + str(YEAR) + '_' + CASE, heat_demand)
